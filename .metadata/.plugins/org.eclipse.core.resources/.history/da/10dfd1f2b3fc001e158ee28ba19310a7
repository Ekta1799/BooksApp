package com.example.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.model.Books;
import com.example.model.Genres;
import com.example.pojo.BooksResource;
import com.example.repository.BookRepository;
import com.example.repository.GenreRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class BooksServiceImpl implements BooksService {

	@Autowired
	private BookRepository bookRepository;
	
	@Autowired
	private GenreRepository genreRepository;

	public List<BooksResource> getAllBooks(int page, int size) {
		
		// Map genre IDs to genre names
        Map<Integer, String> genreMap = new HashMap<>();
        List<Genres> genres = genreRepository.findAll();
        for (Genres genre : genres) {
            genreMap.put(genre.getGenre_id(), genre.getGenre_name());
        }
        
     // Construct API response with genre names
        List<BookResponse> bookResponses = new ArrayList<>();
        for (Book book : books) {
            String genreName = genreMap.get(book.getGenreId());
            BookResponse bookResponse = new BookResponse(book.getTitle(), book.getAuthor(), genreName, book.getAvailability(), book.getConditionStatus());
            bookResponses.add(bookResponse);
        }
        
		List<Books> books = bookRepository.findAll();
		List<BooksResource> list = new ArrayList<BooksResource>();
		for (Books book : books) {
			list.add(convertDTOtoResource(book, genreMap));
		}

		return list;
	}

	private BooksResource convertDTOtoResource(Books books) {
		BooksResource res = new BooksResource();

		res.setTitle(books.getTitle());
		res.setAuthor(books.getAuthor());
		res.setGenre(books.getGenre_id());
		res.setCondition(books.getCondition_status());
		res.setAvailability(books.isAvailability());

		return res;
	}
	
	public BooksResource getBookById(Long id) {
		Optional<Books> books = bookRepository.findById(id);
		
		Books book = books.get();
		
		BooksResource res = convertDTOtoResource(book);
		
		return res;
	}

	// Read operation 
    @Override public List<Books> fetchBooksList() 
    { 
    	
    	List<Books> list = bookRepository.findAll();
        return list; 
    } 

}
